summary(fitall)$coef
?mtcars
fit_qs <- lm(mpg ~ cyl + disp + hp + drat + wt + vs + am + gear + carb, mtcars)
summary(fit_qs)$coef
fit_qsvs <- lm(mpg ~ cyl + disp + hp + drat + wt + am + gear + carb, mtcars)
summary(fit_qsvs)$coef
fit_qsvscarb <- lm(mpg ~ cyl + disp + hp + drat + wt + am + gear, mtcars)
summary(fit_qsvscarb)$coef
anova(fitall, fit_qsvscarb)
?mtcars
plot(mtcars$disp, mtcars$hp)
fit_m1 <- lm(mpg ~ cyl + disp + drat + am, mtcars)
summary(fit_m1)$coef
anova(fitall, fit_m1)
fit_m2 <- lm(mpg ~ cyl + disp + am, mtcars)
summary(fit_m2)$coef
?chose
?choose
names(mtcars)[-1]
names(mtcars)[-"mpg"]
names(mtcars)[-(names(mtcars)) %in% c("mpg", "am"))]
(names(mtcars)) %in% c("mpg", "am"))
names(mtcars) %in% c("mpg", "am")
names(mtcars)[!(names(mtcars) %in% c("mpg", "am"))]
allfac <- names(mtcars)[!(names(mtcars) %in% c("mpg", "am"))]
seq_along(allfac)
allfac2 <- sapply(seq_along(allfac), FUN = function(x) allfac[-x])
allfac2
allfac[-1]
class(allfac2)
?mapply
formulas2 <- apply(allfac2, 2, FUN = function(x) paste(x, collapse = " + "))
formulas2
formulas2 <- apply(allfac2, 2, FUN = function(x){
a <- paste(x, collapse = " + ");
paste("mpg ~ am + ", a, sep = ""))
formulas2 <- apply(allfac2, 2, FUN = function(x){
a <- paste(x, collapse = " + ");
paste("mpg ~ am + ", a, sep = "")})
formulas2
?formula
formulas2 <- apply(allfac2, 2, FUN = function(x){
a <- paste(x, collapse = " + ");
as.formula(paste("mpg ~ am + ", a, sep = ""))})
?formula
formulas2
formulas2[1]
formulas2[[1]]
models2 <- sapply(formulas2, FUN = function(x) lm(x, mtcars))
summary(models2[1])$coef
models2[1]
models2[2]
models2[3]
models2 <- lapply(formulas2, FUN = function(x) lm(x, mtcars))
models2[1]
models2[2]
models2[3]
allfac2
g_am <- ggplot(mtcars2, aes(x = transmission, y = mpg)) +
geom_point()
g_am
g_am <- ggplot(mtcars2, aes(x = transmission, y = mpg)) +
geom_point(alpha = 0.5, size = 5)
g_am
formulas2 <- sapply(allfac, FUN = function(x) paste("mpg ~ am + ", x, sep = ""))
formulas2
a <- lm(formulas2[1])
formulas2 <- sapply(allfac, FUN = function(x) paste("mpg ~ am + ", x, ", mtcars", sep = ""))
formulas2
a <- lm(formulas2[1])
a <- lm(as.formula(formulas2[1]))
formulas2[1]
class(formulas2[1])
formulas2 <- sapply(allfac, FUN = function(x) paste("mpg ~ am + ", x", sep = ""))
formulas2 <- sapply(allfac, FUN = function(x) paste("mpg ~ am + ", x, sep = ""))
a <- lm(formulas[1], mtcars)
a <- lm(formulas2[1], mtcars)
summary(a)$coef
models2 <- sapply(formulas2, FUN = function(x) lm(x, mtcars))
anova(models)
anova(models2)
summary(models2[1])$coef
models2 <- lapply(formulas2, FUN = function(x) lm(x, mtcars))
summary(models2[1])$coef
summary(models2[[1]])$coef
anova(models2[[1]], models2[[2]])
anova(models2[[1]], models2[[2]], models2[[3]])
model1 <- lm(mpg ~ am, mtcars)
model1 <- lm(mpg ~ am, mtcars)
anova(model1, models2[[1]])
a <- anova(model1, models2[[1]])
?anova
a$Pr
Pr2 <- sapply(models2, FUN = function(x) anova(model1, x)$Pr)
Pr2
?mtcars
a$Pr
a$Pr[2]
Pr2 <- sapply(models2, FUN = function(x) anova(model1, x)$Pr[2])
Pr2
minmax(Pr2)
names(Pr2)[Pr2 == min(Pr2)]
names(Pr2)[Pr2 >= 0.05]
omit <- names(Pr2)[Pr2 >= 0.05]
facr <- names(mtcars)[!(names(mtcars) %in% c("mpg", "am", inc, omit))]
inc <- names(Pr2)[Pr2 == min(Pr2)]
omit <- names(Pr2)[Pr2 >= 0.05]
facr <- names(mtcars)[!(names(mtcars) %in% c("mpg", "am", inc, omit))]
facr
formulas3 <- sapply(facr, FUN = function(x) paste("mpg ~ am + ", inc, " + ", x, sep = ""))
formulas3
remodel2 <- lm(mpg ~ am + hp, mtcars)
models3 <- lapply(formulas3, FUN = function(x) lm(x, mtcars))
Pr3 <- sapply(models3, FUN = function(x) anova(remodel2, x)$Pr[2])
Pr3
omit2 <- names(Pr3)[Pr3 >= 0.05]
omit2
inc <- names(Pr3)[Pr3 == min(Pr3)]
inc
inc <- names(Pr2)[Pr2 == min(Pr2)]
inc
inc2
inc2 <- names(Pr3)[Pr3 == min(Pr3)]
inc2
facr2 <- names(mtcars)[!(names(mtcars) %in% c("mpg", "am", inc, omit, inc2, omit2))]
facr2
inc2
omit2
names(Pr3)[Pr3 <= 0.05]
inc2 <- names(Pr3)[Pr3 <= 0.05]
finmod <- lm(mpg ~ am + hp + wt)
finmod <- lm(mpg ~ am + hp + wt, mtcars)
summary(finmod)$coef
plot(finmod)
fm2 <- lm(mpg ~ am + hp + wt + hp*wt, mtcars)
summary(fm2)$coef
anova(finmod, fm2)
fm3 <- lm(mpg ~ am + hp + wt + am*wt, mtcars)
summary(fm2)$coef
summary(fm3)$coef
fm3 <- lm(mpg ~ am + hp + wt + am*wt*hp, mtcars)
summary(fm3)$coef
anova(finmod, fm3)
plot(fm3)
anova(fm2, fm3)
anova(finmod, fm2_a, fm2_b, fm2_c)
fm2_a <- lm(mpg ~ am + hp + wt + hp*wt, mtcars)
fm2_b <- lm(mpg ~ am + hp + wt + hp*am, mtcars)
fm2_c <- lm(mpg ~ am + hp + wt + am*wt, mtcars)
fm3 <- lm(mpg ~ am + hp + wt + am*wt*hp, mtcars)
anova(finmod, fm2_a, fm2_b, fm2_c)
anova(finmod, fm2_a)$Pr[2]
anova(finmod, fm2_b)$Pr[2]
anova(finmod, fm2_c)$Pr[2]
anova(finmod, fm3)$Pr[2]
anova(fm2_a, fm3)$Pr[2]
anova(fm2_a, fm3)
summary(fm2_a)$coef
shapiro.test(fm2_a$residuals)
shapiro.test(fm3$residuals)
?mtcars
mtcars2 <- mtcars
data(mtcars)
mtcars2 <- mtcars
fm2_a <- lm(mpg ~ am + hp + wt + hp*wt, mtcars)
?anova
data(mtcars)
mtcars2 <- mtcars
mtcars2$transmission <- sapply(mtcars2$am, FUN = function(x) if (x == 0) "automatic" else "manual")
mtcars2$transmission <- as.factor(mtcars2$transmission)
library(ggplot2)
library(reshape2)
exnames <- names(mtcars2)[names(mtcars2) != "mpg" & names(mtcars2) != "transmission"]
melted <- melt(mtcars2, id = c("mpg", "transmission"), measure.vars = exnames)
g <- ggplot(melted, aes(x = value, y = mpg, color = transmission)) +
geom_point(alpha = 0.5, size = 5) +
facet_wrap(~ variable, scales = "free")
g
allfac <- names(mtcars)[!(names(mtcars) %in% c("mpg", "am"))]
formulas2 <- sapply(allfac, FUN = function(x) paste("mpg ~ am + ", x, sep = ""))
model1 <- lm(mpg ~ am, mtcars)
models2 <- lapply(formulas2, FUN = function(x) lm(x, mtcars))
Pr2 <- sapply(models2, FUN = function(x) anova(model1, x)$Pr[2])
Pr2
?xtable
ptable <- data.frame()
cbind(ptable, Pr2)
ptable <- data.frame(Pr2)
ptable
ptable <- data.frame(t(Pr2))
ptable
row.names(ptable) <- "p-values"
ptable
facr <- names(mtcars)[!(names(mtcars) %in% c("mpg", "am", inc, omit))]
formulas3 <- sapply(facr, FUN = function(x) paste("mpg ~ am + ", inc, " + ", x, sep = ""))
remodel2 <- lm(mpg ~ am + hp, mtcars)
models3 <- lapply(formulas3, FUN = function(x) lm(x, mtcars))
Pr3 <- sapply(models3, FUN = function(x) anova(remodel2, x)$Pr[2])
allfac <- names(mtcars)[!(names(mtcars) %in% c("mpg", "am"))]
formulas2 <- sapply(allfac, FUN = function(x) paste("mpg ~ am + ", x, sep = ""))
model1 <- lm(mpg ~ am, mtcars)
models2 <- lapply(formulas2, FUN = function(x) lm(x, mtcars))
Pr2 <- sapply(models2, FUN = function(x) anova(model1, x)$Pr[2])
inc <- names(Pr2)[Pr2 == min(Pr2)]
omit <- names(Pr2)[Pr2 >= 0.05]
facr <- names(mtcars)[!(names(mtcars) %in% c("mpg", "am", inc, omit))]
formulas3 <- sapply(facr, FUN = function(x) paste("mpg ~ am + ", inc, " + ", x, sep = ""))
remodel2 <- lm(mpg ~ am + hp, mtcars)
models3 <- lapply(formulas3, FUN = function(x) lm(x, mtcars))
Pr3 <- sapply(models3, FUN = function(x) anova(remodel2, x)$Pr[2])
Pr3
allfac <- names(mtcars)[!(names(mtcars) %in% c("mpg", "am"))]
formulas2 <- sapply(allfac, FUN = function(x) paste("mpg ~ am + ", x, sep = ""))
basemodel1 <- lm(mpg ~ am, mtcars)
models2 <- lapply(formulas2, FUN = function(x) lm(x, mtcars))
Pr2 <- sapply(models2, FUN = function(x) anova(basemodel1, x)$Pr[2])
ptable2 <- data.frame(t(Pr2))
row.names(ptable2) <- "p-values"
library(knitr)
kable(ptable2, format = "markdown")
inc2 <- names(Pr2)[Pr2 == min(Pr2)]
omit2 <- names(Pr2)[Pr2 >= 0.05]
allfac2 <- names(mtcars)[!(names(mtcars) %in% c("mpg", "am", inc2, omit2))]
formulas3 <- sapply(allfac, FUN = function(x) paste("mpg ~ am + ", inc2, " + ", x, sep = ""))
basemodel2 <- lm(mpg ~ am + hp, mtcars)
models3 <- lapply(formulas3, FUN = function(x) lm(x, mtcars))
Pr3 <- sapply(models3, FUN = function(x) anova(basemodel2, x)$Pr[2])
ptable3 <- data.frame(t(Pr3))
row.names(ptable3) <- "p-values"
kable(ptable3, format = "markdown")
Pr3
hp2
inc2
formulas3
allfac2
basemod3 <- lm(mpg ~ am + hp + wt, mtcars)
fm2_a <- lm(mpg ~ am + hp + wt + hp*wt, mtcars)
fm2_b <- lm(mpg ~ am + hp + wt + hp*am, mtcars)
fm2_c <- lm(mpg ~ am + hp + wt + am*wt, mtcars)
fm3 <- lm(mpg ~ am + hp + wt + am*wt*hp, mtcars)
anova(basemod3, fm2_a, fm2_b, fm2_c, fm3)
anova(basemod3, fm2_a)$Pr[2]
p_ints <- c(anova(basemod3, fm2_a)$Pr[2], anova(basemod3, fm2_b)$Pr[2], anova(basemod3, fm2_c)$Pr[2], anova(basemod3, fm3)$Pr[2])
names(p_ints) <- c("no_int", "hp*wt", "hp*am", "am*wt", "am*hp*wt")
names(p_ints) <- c("hp*wt", "hp*am", "am*wt", "am*hp*wt")
p_ints
kable(ptable_ints, format = "markdown")
p_ints <- c(anova(basemod3, fm2_a)$Pr[2], anova(basemod3, fm2_b)$Pr[2], anova(basemod3, fm2_c)$Pr[2], anova(basemod3, fm3)$Pr[2])
names(p_ints) <- c("hp*wt", "hp*am", "am*wt", "am*hp*wt")
ptable_ints <- data.frame(t(p_ints))
row.names(ptable_ints) <- "p-values"
kable(ptable_ints, format = "markdown")
shapiro.test(fm2_a$residuals)
saph <- shapiro.test(fm2_a$residuals)
saph
attributes(saph)
saph$statistic
saph$method
saph$htest
saph$p
summary(fm2_a)$coef
summary(fm2_a)$coef[2]
summary(fm2_a)$coef[7]
coeftable <- summary(fm2_a)$coef
ktable(coeftable, format = "markdown")
kable(coeftable, format = "markdown")
sdata <- read.table("tidied_samsung_data.txt")
View(sdata)
sdata <- read.table("tidied_samsung_data.txt", header = TRUE)
View(sdata)
class(sdata$activity)
levels(sdata$activity)
levels(sdata$features)
3*6
3×5
%×%
?%×%
?%*%
?%in%
6 %in% c(6, 7, 8)
6 %i*% c(6, 7, 8)
6 %*% c(6, 7, 8)
6 %×% c(6, 7, 8)
rateTable <- read.table(getURL(rateURL))
library(RCurl)
rateTable <- read.table(getURL(rateURL))
rateURL <- "https://spreadsheets.google.com/ccc?key=0AonYZs4MzlZbdGFQRk1NMUJ4TF9TVjlQN25tcjRZb1E&single=true&gid=0&output=txt&output=txt"
rateTable <- read.table(getURL(rateURL))
rateTable <- read.table(getURL(rateURL, .opts = list(ssl.verifypeer = FALSE)))
rateURL <- "https://docs.google.com/spreadsheets/d/1_ztbXyOgFYtkOeJTvjsMS4NWpf-feh0hxNCUEha8-DA&single=true&gid=0&output=txt&output=txt"
rateTable <- read.table(getURL(rateURL, .opts = list(ssl.verifypeer = FALSE)))
rateURL <- "https://docs.google.com/spreadsheets/d/1_ztbXyOgFYtkOeJTvjsMS4NWpf-feh0hxNCUEha8-DA&amp;single=true&amp;gid=0&amp;output=txt&amp;output=txt"
rateTable <- read.table(getURL(rateURL, .opts = list(ssl.verifypeer = FALSE)))
rateURL <- "https://docs.google.com/spreadsheets/d/1_ztbXyOgFYtkOeJTvjsMS4NWpf-feh0hxNCUEha8-DA"
rateTable <- read.table(getURL(rateURL, .opts = list(ssl.verifypeer = FALSE)))
rateURL <- "https://spreadsheets.google.com/ccc?key=0AonYZs4MzlZbdGFQRk1NMUJ4TF9TVjlQN25tcjRZb1E&single=true&gid=0&output=txt"
rateTable <- read.table(getURL(rateURL, .opts = list(ssl.verifypeer = FALSE)))
rateCon <- getURL(rateURL, .opts = list(ssl.verifypeer = FALSE))
rateURL <- "https://spreadsheets.google.com/ccc?key=0AonYZs4MzlZbdGFQRk1NMUJ4TF9TVjlQN25tcjRZb1E&single=true&gid=0&output=txt"
rateCon <- getURL(rateURL, .opts = list(ssl.verifypeer = FALSE))
rateTable <- read.table(textConnection(rateCon))
rateCon <- getURL(rateURL)
rateURL <- "https://docs.google.com/spreadsheets/d/1_ztbXyOgFYtkOeJTvjsMS4NWpf-feh0hxNCUEha8-DA/export?format=csv"
rateCon <- getURL(rateURL)
rateCon <- getURL(rateURL, .opts = list(ssl.verifypeer = FALSE))
rateTable <- read.table(textConnection(rateCon))
rateTable <- read.table(rateCon)
?download.file
rateURL <- "https://docs.google.com/spreadsheets/d/1_ztbXyOgFYtkOeJTvjsMS4NWpf-feh0hxNCUEha8-DA/export?format=csv"
rateCon <- download.file(rateURL, cancerrate.csv)
rateFile <- "cancerrate.csv"
rateCon <- download.file(rateURL, rateFile)
rateURL <- "https://docs.google.com/spreadsheets/d/1_ztbXyOgFYtkOeJTvjsMS4NWpf-feh0hxNCUEha8-DA/export?format=csv"
rateFile <- "cancerrate.csv"
download.file(rateURL, rateFile)
rateTable <- read.csv(rateFile)
View(rateTable)
ls()
dir()
install.packages("Rtools")
?write.table()
rsd <- function() {
fn <- "wikips.txt"
for (i in 1:10) {
ds <- randomizer(100)
write.table(ds, fn, append = TRUE)
}
}
randomizer <- function(n){
randomURL <- "https://en.wikipedia.org/wiki/Special:Random"
sets <- numeric()
setnames <- character()
for (i in 1:n) {
randomHTML <- htmlParser(randomURL)
redirected <- xpathSApply(randomHTML, "//link[@rel = 'canonical']/@href")
wikiURL <- "https://en.wikipedia.org/wiki/"
term <- gsub(wikiURL, "", unname(redirected))
termname <- xpathSApply(randomHTML, "//h1", xmlValue) ## !!!! termname could be displayed if necessary !!!!
numrefs <- collector(term)
sets <- c(sets, numrefs)
setnames <- c(setnames, termname)
}
names(sets) <- setnames
sets
}
collector <- function(wikiterm) {
whatLinksURL1 <- "https://en.wikipedia.org/w/index.php?title=Special%3AWhatLinksHere&target="
whatLinksURL2 <- "&namespace=0"
stepURL <- paste0(whatLinksURL1, wikiterm, whatLinksURL2)
refnumber <- 0
while (stepURL != FALSE) {
wikiLinksHTML <- htmlParser(stepURL)
refnumber <- refnumber + readValues(wikiLinksHTML)
stepURL <- stepForward(wikiLinksHTML)
}
refnumber
}
stepForward <- function(html) {
relative <- xpathSApply(html,
"//a[
contains(@title, 'Special:WhatLinksHere/') and
contains(@href, '&from=') and
contains(@href, '&back=') and
not(contains(@href, '&hide')) and
not(contains(@href, '&limit'))
]/@href")
rightIndices <- function(rel) {
posfrom <- regexpr("&from=[0-9]+", rel)
posback <- regexpr("&back=[0-9]+", rel)
fromvalue <- substr(rel, posfrom+6, posfrom + unlist(attributes(posfrom)[1]) - 1)
backvalue <- substr(rel, posback+6, posback + unlist(attributes(posback)[1]) - 1)
if (fromvalue != backvalue) {
TRUE
} else FALSE
}
forwardlink <- unique(unname(relative))
rightselect <- sapply(forwardlink, rightIndices)
rightselect <- unname(rightselect)
forwardlink <- forwardlink[rightselect]
if (length(forwardlink) == 1) {
wikiShortURL <- "https://en.wikipedia.org"
paste0(wikiShortURL, forwardlink)
} else FALSE
}
htmlParser <- function(link) {
connection <- getURL(link, .opts = list(ssl.verifypeer = FALSE), followlocation=TRUE, .mapUnicode = FALSE)
htmlParse(connection, asText = TRUE)
}
###### FUNCTION: tests if Wikipedia article exists. Returns its exact title if exists
## uses htmlParser()
wikiExists <- function(term) {
term <- gsub(" ", "_", term)
term <- gsub("[^[:graph:]]+", "", term)
term <- gsub("[%{}<>]+", "", term)
term <- gsub("\\[+", "", term)
term <- gsub("\\]+", "", term)
wikiURL <- "https://en.wikipedia.org/wiki/"
link <- paste0(wikiURL, term)
html <- htmlParser(link)
MSG <- xpathSApply(html, "//td/b", xmlValue)[1]
nofoundMSG <- "Wikipedia does not have an article with this exact name."
if (MSG == nofoundMSG) {
FALSE
} else {
redirected <- xpathSApply(html, "//link[@rel = 'canonical']/@href")
gsub(wikiURL, "", unname(redirected))
}
}
##### FUNCTION: reads referencing page titles on te current page
##
readValues <- function(html){
values <- character()
MSG <- xpathSApply(html, "//body/div/div/div/p", xmlValue)[1]
foundvaluesMSG <- "The following pages link to"
if (grepl(foundvaluesMSG, MSG)){
values <- xpathSApply(html,
"//ul//a[@title and starts-with(@href, '/wiki/') and
not(contains(@href, ':')) and
not(@class) and
not(@accesskey)
]", xmlValue)
}
length(values)
}
rsd()
library(RCurl)
library(XML)
library(googleVis)
rsd()
rsd <- function() {
fn <- "wikips.txt"
for (i in 1:90) {
ds <- randomizer(100)
write.table(ds, fn, append = TRUE)
print(i)
}
}
rsd()
library(googleVis)
library(ggplot2)
?read.table
df <- read.table("wikips.txt")
df <- read.table("wikips.txt", nrows = 100)
View(df)
df <- read.table("wikips.txt")
df <- read.table("wikips.txt", header = FALSE)
df <- read.table("wikips.txt", header = FALSE)
df <- read.table("wikips.txt")
df <- read.table("wikips.txt")
df <- read.table("wikips.txt", header = FALSE)
df <- read.table("wikips.txt", header = FALSE, sep = "\t")
View(df)
df <- read.table("wikips.txt", header = FALSE)
View(df)
View(df)
sets <- df[,2]
names(sets) <- df[, 1]
df <- data.frame(id = names(sets), refers = sets)
View(df)
write.table(df, "wikips.txt")
title <- paste("Distribution of references to", length(sets), "random Wikipedia pages", sep = " ")
plot(gvisHistogram(df, options=list(
legend = "{ position: 'none' }",
hAxis = "{title: 'No. of referring pages'}",
vAxis = "{title: 'Frequency'}",
title = title,
colors = "['#5aaeff']",
width = 600,
height = 600),
chartid = "WikiRefs"))
max(sets)
names(sets[sets == max(sets)])
names(sets[sets < max(sets) & max sets > 5000])
names(sets[sets < max(sets) & sets > 5000])
View(df)
df <- df[refers < max(refers),]
View(df)
df <- df[df&refers < max(df&refers),]
names(df)
df <- df[df$refers < max(df$refers),]
title <- paste("Distribution of references to", length(df$refers), "random Wikipedia pages", sep = " ")
plot(gvisHistogram(df, options=list(
legend = "{ position: 'none' }",
hAxis = "{title: 'No. of referring pages'}",
vAxis = "{title: 'Frequency'}",
title = title,
colors = "['#5aaeff']",
width = 600,
height = 600),
chartid = "WikiRefs"))
length(df$refers)
setwd("whikipath-pres/wikipath-pres")
setwd("whikipath-pres")
dir()
setwd("wikipath-pres")
setwd("wikipath-pres")
library(slidify)
library(knitr)
runDeck()
runDeck()
runDeck()
dir()
library(devtools)
publish_github("hoakact@gmail.com", "wikipath-pres")
publish_github("hand83", "wikipath-pres")
publish_github("hand83/wikipath-pres")
publish_github("hand83/wikipath-pres")
publish-github("hand83", "wikipath-pres")
publish_github("hand83", "wikipath-pres")
publish(user = "hand83", repo = "wikipath-pres")
publish(title = 'wikipath-pres', 'index.html', host = 'rpubs')
publish(title = 'wikipath-pres', 'index.html', host = 'rpubs')
